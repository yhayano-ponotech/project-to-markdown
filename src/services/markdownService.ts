import * as vscode from 'vscode';
import * as path from 'path';
import { workspace } from 'vscode';
import { IConfig } from './../types/config';
import { FileService } from './fileService';
import { getLanguageId } from './../types/fileUtils';

export class MarkdownService {
    private fileService: FileService;

    constructor(private config: IConfig) {
        this.fileService = new FileService(config);
    }

    async generateMarkdown(
        files: vscode.Uri[],
        progressCallback?: (current: number, total: number) => void
    ): Promise<string> {
        let markdown = this.generateHeader();
        let currentFile = 0;
        const totalFiles = files.length;

        for (const file of files) {
            try {
                const content = await this.fileService.readFile(file);
                const relativePath = workspace.asRelativePath(file);

                // Add file section
                markdown += this.generateFileSection(relativePath, content, file);

                currentFile++;
                if (progressCallback) {
                    progressCallback(currentFile, totalFiles);
                }
            } catch (error) {
                console.error(`Error processing file ${file.fsPath}:`, error);
                // Continue with next file
            }
        }

        return markdown;
    }

    private generateHeader(): string {
        const timestamp = new Date().toISOString();
        const workspaceName = workspace.name || 'Project';

        return [
            `# ${workspaceName} Files\n`,
            '> Generated by Project To Markdown\n',
            `> Generated at: ${timestamp}\n\n`,
            this.config.includeTableOfContents ? '[TOC]\n\n' : '',
            '---\n\n'
        ].join('');
    }

    private generateFileSection(relativePath: string, content: string, uri: vscode.Uri): string {
        const languageId = getLanguageId(uri);
        const section = [
            `## File: ${relativePath}\n\n`
        ];

        // Add file metadata if configured
        if (this.config.includeFileMetadata) {
            const stat = workspace.fs.stat(uri);
            section.push('**File Information:**\n');
            section.push(`- Path: \`${relativePath}\`\n`);
            section.push(`- Type: ${languageId || 'plain text'}\n`);
            section.push('\n');
        }

        // Add file content
        section.push('**Content:**\n\n');
        section.push('```' + (languageId || '') + '\n');
        section.push(content);
        section.push('\n```\n\n');
        section.push('---\n\n');

        return section.join('');
    }
}